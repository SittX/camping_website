<?php

require_once("DataRepository.php");
require_once(MODEL_PATH . "CampSite.php");
require_once(UTILS_PATH . "DataRepositoryUtil.php");

class CampSiteDataRepository implements DataRepository
{
    private mysqli $connection;
    private PitchTypeDataRepository $pitchTypeRepo;

    public function __construct($connection)
    {
        $this->connection = $connection;
        $this->pitchTypeRepo = new PitchTypeDataRepository($connection);
    }

    public function searchById($id)
    {
        $query = "SELECT * FROM CampSite WHERE site_id = ?";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);

        $mysqli_result = $stmt->get_result();
        if ($mysqli_result->num_rows <= 0) {
            throw new mysqli_sql_exception("Camp Site with the given id is not found");
        }

        $result = $mysqli_result->fetch_assoc();
        $siteId = $result["site_id"];
        $result["images"] = $this->fetchImages($siteId);

        // var_dump($result);
        $stmt->close();
        return $this->mapRowToCampSiteObject($result);
    }

    public function getLists(): ?array
    {
        $query = "SELECT * FROM CampSite";
        $stmt = $this->connection->prepare($query);

        if (!$stmt->execute()) {
            throw new mysqli_sql_exception("Error executing the given sql statement.");
        }

        // Steps
        // 1. Extract all the site_id from the associate array 
        // 2. Fetch images for each site_id
        // 3. Add images for each site associate array as "image" element before adding to "mapRowToCampSiteObject" method
        $mysqli_result = $stmt->get_result();
        $campSiteList = [];
        while ($row = $mysqli_result->fetch_assoc()) {
            $row["images"] = $this->fetchImages($row["site_id"]);
            $campSite = $this->mapRowToCampSiteObject($row);
            $campSiteList[] = $campSite;
        }
        $stmt->close();
        return $campSiteList;
    }

    public function update($existingData, $newData): int|string
    {
        $query = "UPDATE CampSite SET name= ? location = ?, price = ?, description = ?,local_attraction=?, features = ?, notice_note = ?,pitch_type_id = ? WHERE site_id = ?;";
        $paramTypes = "ssissssii";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $newData->getName(), $newData->getLocation(), $newData->getPrice(), $newData->getDescription(), $newData->getLocalAttraction(), $newData->getFeatures(), $newData->getNoticeNote(), $newData->getPitchTypeId(), $existingData->getSiteId());

        $affectedRow = $stmt->affected_rows;
        $stmt->close();
        return $affectedRow;
    }

    public function insert($data): int
    {
        $query = "INSERT INTO CampSite (name,location, price, description,local_attraction,features,notice_note,pitch_type_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?);";
        $paramTypes = "ssissssi";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $data->getName(), $data->getLocation(), $data->getPrice(), $data->getDescription(), $data->getLocalAttraction(), $data->getFeatures(), $data->getNoticeNote(), $data->getPitchType()->getPitchTypeId());

        $affectedRow = $stmt->affected_rows;
        $autoGeneratedID = $this->connection->insert_id;
        $stmt->close();
        return $autoGeneratedID;
    }

    public function remove($id): int|string
    {
        $query = "DELETE FROM CampSite WHERE site_id = ?;";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);

        $affectedRow = $stmt->affected_rows;
        $stmt->close();
        return $affectedRow;
    }

    // Helper functions
    private function mapRowToCampSiteObject($row): CampSite
    {
        $pitchType = $this->pitchTypeRepo->searchById($row["pitch_type_id"]);
        $campsite = new CampSite($row['name'], $row['location'], $row['description'], $row['local_attraction'], $row['features'], $row['notice_note'], $pitchType, $row['price']);
        $campsite->setSiteId($row['site_id']);
        $campsite->setImages($row["images"]);
        return $campsite;
    }

    private function fetchImages($id)
    {
        $query = "SELECT * FROM CampSiteImages WHERE site_id = ?";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);

        $result = $stmt->get_result();
        $images = [];

        // If there is no images for the campsite return empty array
        if ($result->num_rows < 0) {
            return $images;
        }

        $images = [];
        while ($row = $result->fetch_assoc()) {
            $images[] = $row["url"];
        }
        return $images;
    }
}
