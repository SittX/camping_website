<?php
require_once(MODEL_PATH . "Review.php");
require_once(UTILS_PATH . "DataRepositoryUtil.php");

class ReviewDataRepository implements DataRepository
{
    private mysqli $connection;
    private UserDataRepository $userRepo;
    private CampSiteDataRepository $siteRepo;

    public function __construct(mysqli $connection)
    {
        $this->connection = $connection;
        $this->userRepo = new UserDataRepository($connection);
        $this->siteRepo = new CampSiteDataRepository($connection);
    }

    public function searchBySiteId($id)
    {
        $query = "SELECT * FROM Review WHERE site_id = ?";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);

        $mysqli_result = $stmt->get_result();
        if ($mysqli_result->num_rows <= 0) {
            return null;
        }

        $reviewList = [];
        while ($row = $mysqli_result->fetch_assoc()) {
            $review = $this->mapRowToReviewObject($row);
            $reviewList[] = $review;
        }
        $stmt->close();

        return $reviewList;
    }


    public function searchById($id)
    {
        $query = "SELECT * FROM Review WHERE review_id = ?";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);

        $mysqli_result = $stmt->get_result();
        if ($mysqli_result->num_rows <= 0) {
            throw new mysqli_sql_exception("Review with the given id is not found");
        }

        $result = $mysqli_result->fetch_assoc();
        $stmt->close();
        return $this->mapRowToReviewObject($result);
    }

    public function getLists(): ?array
    {
        $query = "SELECT * FROM Review";
        $stmt = $this->connection->prepare($query);

        if (!$stmt->execute()) {
            throw new mysqli_sql_exception("Error executing the given sql statement.");
        }

        $mysqli_result = $stmt->get_result();
        $reviewList = [];
        while ($row = $mysqli_result->fetch_assoc()) {
            $user = $this->mapRowToReviewObject($row);
            $reviewList[] = $user;
        }
        $stmt->close();
        return $reviewList;
    }

    public function update($existingData, $newData): int|string
    {
        $query = "UPDATE Review SET message = ?, title = ?, rating = ? WHERE review_id = ?";

        $paramsType = 'ssii';
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramsType, $newData->getMessage(), $newData->getTitle(), $newData->getRating(), $existingData->getReviewId());

        $affectedRow = $stmt->affected_rows;
        $stmt->close();
        return $affectedRow;
    }

    public function insert($data): int|string
    {
        $query = "INSERT INTO Review(message, title, rating, user_id, site_id) VALUES (?, ?, ?, ?, ?)";
        $paramTypes = "ssiii";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $data->getMessage(), $data->getTitle(), $data->getRating(), $data->getUser()->getUserId(), $data->getSite()->getSiteId());

        $affectedRow = $stmt->affected_rows;
        $autoGeneratedID = $this->connection->insert_id;
        $stmt->close();
        return $autoGeneratedID;
    }

    public function remove($id): int|string
    {
        $query = "DELETE FROM Review WHERE review_id = ?";
        $paramTypes = "i";
        $stmt = prepareAndExecuteQuery($this->connection, $query, $paramTypes, $id);
        $affectedRow = $stmt->affected_rows;
        $stmt->close();
        return $affectedRow;
    }

    private function mapRowToReviewObject($row): Review
    {
        $user = $this->userRepo->searchById($row["user_id"]);
        $site = $this->siteRepo->searchById($row["site_id"]);
        $review = new Review($row['rating'], $row['message'], $row['title']);
        $review->setReviewId($row['review_id']);
        $review->setUser($user);
        $review->setSite($site);
        return $review;
    }
}
